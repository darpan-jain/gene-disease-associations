# -*- coding: utf-8 -*-
"""EE638 project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LNTbw7YQeMIYZVVmZVdp3ZNhEBqEaidD
"""
import pickle
import pandas as pd
import networkx as nx

"""# Gene Node Features"""

training_data = pd.read_csv('GDA_associations.csv')

gene_data = training_data[['geneid', 'gene_dsi', 'gene_dpi',	'gene_pli', 'protein_class']].drop_duplicates()

protein_class_cat_codes, protein_class_category_map = pd.factorize(gene_data['protein_class'])
gene_data['protein_class'] = protein_class_cat_codes

gene_data = gene_data.fillna(0)

gene_node_attr = gene_data.set_index('geneid').to_dict('index')

"""# Disease Node Feature Vector"""

disease_class_list = ['C01', 'C04', 'C05', 'C06', 'C07', 'C08', 'C09', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16', 'C17', 'C18', 'C19', 'C20', 'C21', 'C22', 'C23', 'C24', 'C25', 'C26', 'F01', 'F02', 'F03']


disease_data = training_data[['diseaseid',	'disease_class',	'disease_type',	'disease_semantic_type']].drop_duplicates()
disease_data = disease_data.reset_index(drop=True)

# disease_id_cat_codes, disease_id_category_map = pd.factorize(disease_data['diseaseid'])
# disease_data['diseaseid'] = disease_id_cat_codes

disease_type_cat_codes, disease_type_category_map = pd.factorize(disease_data['disease_type'])
disease_data['disease_type'] = disease_type_cat_codes

disease_semantic_type_cat_codes, disease_semantic_type_category_map = pd.factorize(disease_data['disease_semantic_type'])
disease_data['disease_semantic_type'] = disease_semantic_type_cat_codes


for each_class in disease_class_list:
  disease_data[each_class] = 0


for idx, row in disease_data.iloc[:-1].iterrows():
  if row['disease_class'] == None:
    continue
  else:
    list_of_disease_classes = row['disease_class'].split(';')
    for each_class in list_of_disease_classes:
      disease_data.at[idx, each_class] = 1

disease_data = disease_data.drop(['disease_class'], axis = 1)
disease_node_attr = disease_data.set_index('diseaseid').to_dict('index')

"""# Graph"""
G = nx.Graph()
G = nx.from_pandas_edgelist(training_data, 'geneid', 'diseaseid', ['score'])
G = nx.convert_node_labels_to_integers(G, label_attribute="revert")

nx.set_node_attributes(G, gene_node_attr)
nx.set_node_attributes(G, disease_node_attr)

# TODO: Add PPI and other info as node attributes

# G.nodes[1] To access the gene node
# G.nodes['C0036341'] To access the disease node
# G[1]['C0036341'] To access the edge of the graph

# save graph object to file
pickle.dump(G, open('GDA_graph.pickle', 'wb'))